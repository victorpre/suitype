{"version":3,"sources":["words/Letter.js","words/Word.js","hooks/useKeyPress.js","utils/loader.js","words/Words.js","App.js","serviceWorker.js","index.js"],"names":["Letter","content","style","color","isCorrect","isNull","setColor","Word","letters","className","map","v","i","key","correct","useKeyPress","callback","useState","keyPressed","setKeyPressed","useEffect","downHandler","e","keyCode","preventDefault","length","includes","upHandler","window","addEventListener","removeEventListener","load","a","count","fetch","req","json","res","sampleSize","Words","currentChar","setCurrentChar","words","setWords","getInitialChar","initialWords","charAt","word","current","letter","getCharObjects","w","split","l","j","console","log","loadWords","k","updatedWords","updatedCurrentChar","isFirstLetter","wordIndex","letterIndex","previousChar","backspaceTyped","newCurrent","spacebarTyped","last","isEqual","isEndOfWord","newCharTyped","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.71e134ab.chunk.js","sourcesContent":["import React from 'react';\nimport {isNull} from 'lodash';\n\nfunction Letter({content, isCorrect}) {\n  function setColor(isCorrect) {\n    if (isNull(isCorrect)) {\n      return 'black'\n    }\n\n    return isCorrect ? 'green' : 'red'\n  }\n\n  const style = {\n    color: setColor(isCorrect)\n  };\n\n  return(\n    <span style={style}>\n      {content}\n    </span>\n  )\n}\n\nexport default Letter\n","import React from 'react';\nimport Letter from './Letter';\nimport { map } from 'lodash'\n\nfunction Word({letters}) {\n\n  return(\n    <div className=\"word\">\n      {\n        map(letters, (v, i) => <Letter key={i} content={v.content} isCorrect={v.correct} /> )\n      }\n    </div>\n  )\n}\n\nexport default Word\n","import { useState, useEffect } from 'react';\nimport {includes} from 'lodash';\n\nconst BACKSPACE = 8\nconst SPACEBAR = 32\n\nconst useKeyPress = callback => {\n\n  const [keyPressed, setKeyPressed] = useState();\n  useEffect(() => {\n    const downHandler = (e) => {\n      const {key, keyCode} = e;\n      if (keyCode === BACKSPACE) {\n        e.preventDefault();\n      }\n      if ((keyPressed !== key && key.length === 1) || includes([BACKSPACE,SPACEBAR], keyCode)) {\n        setKeyPressed(key);\n        callback && callback(key);\n      }\n    };\n    const upHandler = () => {\n      setKeyPressed(null);\n    };\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n\n  return keyPressed;\n};\n\nexport default useKeyPress;\n","import {sampleSize} from 'lodash';\n\nexport default async function load(count = 10) {\n  const req = await fetch('js/english_10k.json')\n  const res = await req.json()\n  return sampleSize(res, count)\n};\n","import React, {useState, useEffect} from 'react';\nimport {map, last, isEqual} from 'lodash';\nimport Word from './Word';\nimport useKeyPress from '../hooks/useKeyPress';\nimport load from '../utils/loader'\n\n\nfunction Words() {\n  const [currentChar, setCurrentChar] = useState({});\n  const [words, setWords] = useState([]);\n\n  function getInitialChar(initialWords) {\n    return {\n      content: initialWords[0].charAt(0),\n      word: 0,\n      current: true,\n      letter: 0,\n      correct: null\n    }\n  }\n\n  function getCharObjects(initialWords) {\n    return map(initialWords, (w, i) => {\n      return map(w.split(''), (l, j) => {\n        return {\n          content: l,\n          current: false,\n          word: i,\n          letter: j,\n          correct: null\n        }\n      })\n    })\n  }\n\n  function newCharTyped(k) {\n    const { word, letter, content } = currentChar;\n    // end of words\n    if (word + 1 === words.length && letter === last(words).length - 1 ) {\n      return\n    }\n\n    let updatedWords = words;\n    let updatedCurrentChar = currentChar;\n\n    updatedCurrentChar = {...currentChar,\n      correct: isEqual(k, content),\n      current: false\n    }\n\n    // check if end of word\n    const isEndOfWord = letter === words[word].length - 1;\n    const wordIndex = isEndOfWord ? word + 1 : word;\n    const letterIndex = isEndOfWord ? 0 : letter + 1;\n    const newCurrent = {...words[wordIndex][letterIndex], current: true};\n    updatedWords[wordIndex][letterIndex] = newCurrent;\n    setCurrentChar(newCurrent)\n\n    updatedWords[word][letter] = updatedCurrentChar;\n    setWords(updatedWords);\n  }\n\n  function backspaceTyped() {\n    if (currentChar.letter === 0 && currentChar.word === 0) {\n      return\n    }\n\n    const { word, letter } = currentChar;\n    let updatedWords = words;\n    let updatedCurrentChar = {...currentChar,\n      correct: null,\n      current: false\n    };\n\n    updatedWords[word][letter] = updatedCurrentChar;\n\n    // // check if beginning or middle of word\n    const isFirstLetter = letter === 0;\n    const wordIndex = isFirstLetter ? word - 1 : word;\n    const letterIndex = isFirstLetter ? words[wordIndex].length - 1 : letter - 1;\n    const previousChar = {...words[wordIndex][letterIndex], correct: null};\n\n    updatedWords[wordIndex][letterIndex] = previousChar;\n    setCurrentChar(previousChar);\n\n    setWords(updatedWords);\n  }\n\n  function spacebarTyped() {\n    const { word, letter } = currentChar;\n    if (letter === 0) {\n      return\n    }\n\n    // go to next word\n    let updatedWords = words;\n\n    // if middle of word\n    if (letter !== words[word].length - 1) {\n      const wordIndex = word + 1;\n      const letterIndex = 0;\n      const newCurrent = {...words[wordIndex][letterIndex], current: true};\n      updatedWords[wordIndex][letterIndex] = newCurrent;\n\n      // mark all remaining non-typed chars as incorrect\n      for (var i = letter; i < words[word].length; i++) {\n        updatedWords[word][i] = {...updatedWords[word][i], current: false, correct: false};\n      }\n      setCurrentChar(newCurrent)\n      setWords(updatedWords);\n    }\n\n  }\n\n  useEffect( () => {\n    async function loadWords() {\n      const words = await load();\n      console.log(words);\n      setCurrentChar(getInitialChar(words));\n      setWords(getCharObjects(words));\n    }\n    loadWords();\n  }, []);\n\n\n  useKeyPress( k => {\n    if (k === \"Backspace\") {\n      backspaceTyped();\n    } else if (k === \" \") {\n      spacebarTyped();\n    } else {\n      newCharTyped(k);\n    }\n\n    // update words\n    // if (updatedWords.length < 10) {\n    //   // load more words\n    // }\n  })\n\n  return(\n    <div className=\"wordsWrapper\">\n      <div className=\"words\">\n        {\n          map(words, (letters, i) => <Word key={`word_${i}`} letters={letters} />)\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Words\n","import React from 'react';\nimport './App.css';\nimport Words from './words/Words';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Words/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}